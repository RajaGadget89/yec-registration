name: DB — Promote Staging → Prod

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      skip_shadow:
        description: "Skip shadow test (not recommended)"
        required: false
        default: "false"
        type: choice
        options: ["false", "true"]

concurrency:
  group: db-prod-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  statuses: write

jobs:
  report_required_status_for_pr:
    name: report_required_status_for_pr
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Report required context for PR (no-op)
        uses: actions/github-script@v7
        with:
          script: |
            const sha = context.payload.pull_request.head.sha;
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha,
              state: 'success',
              context: 'DB — Promote Staging → Prod / push_to_prod (push)',
              description: `PR no-op status to satisfy ruleset`,
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            });

  detect_changes:
    name: detect_changes
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      db_changed: ${{ steps.filter.outputs.db }}
      db_files: ${{ steps.filter.outputs.db_files }}
    steps:
      - uses: actions/checkout@v4
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            db:
              - 'migrations/**'
              - 'supabase/migrations/**'
              - '.github/workflows/db-promote-prod.yml'
          list-files: shell

  test_on_shadow:
    name: test_on_shadow
    if: github.event_name == 'push' && needs.detect_changes.outputs.db_changed == 'true' && !(github.event_name == 'workflow_dispatch' && github.event.inputs.skip_shadow == 'true')
    needs: detect_changes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: supabase/setup-cli@v1
        with:
          version: latest
      - name: Mirror migrations → supabase/migrations (CLI compat)
        run: |
          rm -rf supabase/migrations
          mkdir -p supabase/migrations
          echo "${{ needs.detect_changes.outputs.db_files }}" | tr ' ' '\n' | grep '^migrations/.*\.sql$' | sort | while read -r f; do
            echo "Copy $f → supabase/migrations/"
            cp --parents "$f" supabase/ 2>/dev/null || cp "$f" supabase/migrations/
          done
      - name: Start local Supabase (shadow)
        run: |
          supabase start
          supabase status
      - name: Apply migrations to SHADOW
        env:
          SHADOW_DB_URL: postgresql://postgres:postgres@localhost:54322/postgres
        run: |
          set -euo pipefail
          printf 'y\n' | supabase db reset --db-url "$SHADOW_DB_URL"

  noop_when_not_db:
    name: No DB changes → fast-pass
    if: github.event_name == 'push' && needs.detect_changes.outputs.db_changed != 'true'
    needs: detect_changes
    runs-on: ubuntu-latest
    steps:
      - run: echo "No changes under migrations/; promoting step is skipped."

  push_to_prod:
    name: push_to_prod
    if: github.event_name == 'push' && needs.detect_changes.outputs.db_changed == 'true'
    needs: [detect_changes, test_on_shadow]
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://yec.rajagadget.live
    steps:
      - uses: actions/checkout@v4
      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Link Supabase (prod)
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: supabase link --project-ref ${{ secrets.SB_PROD_REF }}

      - name: Mirror migrations → supabase/migrations (CLI compat)
        run: |
          rm -rf supabase/migrations
          mkdir -p supabase/migrations
          echo "${{ needs.detect_changes.outputs.db_files }}" | tr ' ' '\n' | grep '^migrations/.*\.sql$' | sort | while read -r f; do
            echo "Copy $f → supabase/migrations/"
            cp --parents "$f" supabase/ 2>/dev/null || cp "$f" supabase/migrations/
          done

      - name: Push migrations → Prod (requires environment approval)
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: supabase db push

      - name: Upload backup artifact (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: prod-schema-backup
          path: supabase/.temp/
          retention-days: 14

