name: DB — Migrate to Staging

on:
  workflow_dispatch: {}
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]

concurrency:
  group: db-staging-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  statuses: write

jobs:
  detect_changes:
    name: detect_changes
    runs-on: ubuntu-latest
    outputs:
      db_changed: ${{ steps.filter.outputs.db }}
      db_files: ${{ steps.filter.outputs.db_files }}
    steps:
      - uses: actions/checkout@v4
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          list-files: shell
          filters: |
            db:
              - 'migrations/**/*.sql'
              - '.github/workflows/db-migrate-staging.yml'

  test_on_shadow:
    name: test_on_shadow
    needs: detect_changes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Fast-pass when no DB changes
        if: needs.detect_changes.outputs.db_changed != 'true'
        run: echo "No DB changes; shadow test skipped (pass)."

      - name: Setup Supabase CLI
        if: needs.detect_changes.outputs.db_changed == 'true'
        uses: supabase/setup-cli@v1
        with:
          version: latest

      # ⬇️ แก้เฉพาะสเต็ปนี้
      - name: Build migration set for shadow (remote base + local)
        if: needs.detect_changes.outputs.db_changed == 'true'
        env:
          STAGING_DB_URL: ${{ secrets.STAGING_DB_URL }}
        run: |
          set -euo pipefail
          rm -rf supabase/migrations
          mkdir -p supabase/migrations

          # 1) dump schema จาก STAGING → ไฟล์ชั่วคราว (_tmp_remote_base.sql) ด้วย pg_dump v17
          #    พร้อม exclude สคีมาของระบบ Supabase ที่มีอยู่แล้วใน local
          docker run --rm \
            -e STAGING_DB_URL="${STAGING_DB_URL}" \
            -v "$PWD/supabase/migrations:/out" \
            postgres:17-alpine sh -lc '
              set -e
              SCHEMAS="auth storage graphql_public pgbouncer extensions realtime supabase_migrations"
              EXCLUDES=""
              for s in $SCHEMAS; do EXCLUDES="$EXCLUDES --exclude-schema=$s"; done
              eval "pg_dump --dbname=\"\$STAGING_DB_URL\" \
                            --schema-only --no-owner --no-privileges \
                            \$EXCLUDES" > /out/_tmp_remote_base.sql
            '

          echo "----- tmp(head) -----"
          head -n 25 supabase/migrations/_tmp_remote_base.sql || true

          # 2) กรอง meta-commands ของ psql (เช่น \restrict, \unrestrict, \connect ฯลฯ)
          awk '!/^[[:space:]]*\\/' supabase/migrations/_tmp_remote_base.sql \
            > supabase/migrations/00000000000000_remote_base.sql

          # 3) ลบไฟล์ชั่วคราวเพื่อกันไม่ให้ของดิบถูกนำไปรัน
          rm -f supabase/migrations/_tmp_remote_base.sql

          echo "----- filtered(head) -----"
          head -n 25 supabase/migrations/00000000000000_remote_base.sql || true

          # 4) การ์ดกันพลาด
          if grep -nE '^[[:space:]]*\\' supabase/migrations/00000000000000_remote_base.sql; then
            echo "::error::filtered remote base still contains psql meta-commands"
            exit 1
          fi

          # 5) ผนวกไฟล์ migrations ในรีโปเข้ามา
          cp -a migrations/. supabase/migrations/
          ls -la supabase/migrations

      - name: Start local Supabase (shadow) + apply
        if: needs.detect_changes.outputs.db_changed == 'true'
        run: |
          set -euo pipefail
          supabase start
          printf 'y\n' | supabase db reset

      - name: Report required context (ruleset-compat)
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          JOB_STATUS: ${{ job.status }}
        with:
          script: |
            const state = process.env.JOB_STATUS === 'success' ? 'success' : 'failure'
            const sha = context.payload.pull_request.head.sha
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner, repo: context.repo.repo, sha,
              state, context: 'DB — Migrate to Staging / test_on_shadow (pull_request)',
              description: `Run ${context.runId}`,
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            })

  push_to_staging:
    name: push_to_staging
    needs: [detect_changes, test_on_shadow]
    if: needs.detect_changes.outputs.db_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install PostgreSQL client (for psql)
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Apply changed migrations to STAGING (psql)
        env:
          STAGING_DB_URL: ${{ secrets.STAGING_DB_URL }}
          CHANGED: ${{ needs.detect_changes.outputs.db_files }}
        run: |
          set -euo pipefail
          echo "Changed migration files:"
          echo "$CHANGED"
          if [ -z "$CHANGED" ]; then
            echo "No changed .sql files detected."
            exit 0
          fi
          for f in $(echo "$CHANGED" | tr ' ' '\n' | sort); do
            echo "==> Applying $f"
            psql "$STAGING_DB_URL" -v ON_ERROR_STOP=1 -f "$f"
          done

