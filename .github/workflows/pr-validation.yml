name: PR Validation
on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - ".github/workflows/pr-validation.yml"
      - "migrations/**"
      - "supabase/migrations/**"
      - "tests/**"
      - "app/**"

concurrency:
  group: pr-validation-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: read
  statuses: write

jobs:
  # Job 1: ตรวจสอบการเปลี่ยนแปลงไฟล์ Migration
  detect:
    name: Detect DB Changes
    runs-on: ubuntu-latest
    outputs:
      db_changed: ${{ steps.filter.outputs.db }}
      db_files: ${{ steps.filter.outputs.db_files }}
    steps:
      - uses: actions/checkout@v4
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          list-files: shell
          filters: |
            db:
              - 'supabase/migrations/**/*.sql'
              - 'migrations/**/*.sql'

  # Job 2: ทดสอบ Migration บน Shadow DB
  test_db_shadow:
    name: Test DB on Shadow
    needs: detect
    if: needs.detect.outputs.db_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Report no-op pass (no DB changes)
        if: needs.detect.outputs.db_changed != 'true'
        run: echo "No DB changes; fast-passing."
        
      - name: Checkout code
        if: needs.detect.outputs.db_changed == 'true'
        uses: actions/checkout@v4
      
      - name: Setup Supabase CLI
        if: needs.detect.outputs.db_changed == 'true'
        uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Build and Test on Shadow DB
        if: needs.detect.outputs.db_changed == 'true'
        env:
          STAGING_DB_URL: ${{ secrets.STAGING_DB_URL }}
        run: |
          set -euo pipefail
          # รวมไฟล์จากราก /migrations ไปไว้ที่ supabase/migrations/ ถ้ามี
          mkdir -p supabase/migrations
          if ls migrations/*.sql >/dev/null 2>&1; then
            cp -a migrations/. supabase/migrations/
          fi
          echo "Starting Supabase services & resetting DB on shadow..."
          supabase start
          printf 'y\n' | supabase db reset
      
      - name: Report required context for Ruleset
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const sha = context.payload.pull_request.head.sha;
            let state = 'success';
            if ('${{ needs.detect.outputs.db_changed }}' === 'true') {
              if ('${{ job.status }}' !== 'success') state = 'failure';
            }
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha,
              state,
              context: 'PR Validation / Test DB on Shadow (pull_request)',
              description: 'Migration script tested or fast-passed.'
            });

  # Job 3: Apply Migration ไปยัง Staging DB
  push_db_staging:
    name: Push DB to Staging
    needs: [detect, test_db_shadow]
    if: needs.detect.outputs.db_changed == 'true' && needs.test_db_shadow.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Mirror ALL migrations → supabase/migrations
        run: |
          rm -rf supabase/migrations
          mkdir -p supabase/migrations
          cp -a migrations/. supabase/migrations/

      - name: Push migrations → Staging
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_REF: ${{ secrets.SB_STAGING_REF }}
        run: |
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
          supabase db push

      - name: Report required context for Ruleset
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const sha = context.payload.pull_request.head.sha;
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner, repo: context.repo.repo, sha,
              state: '${{ job.status }}' === 'success' ? 'success' : 'failure',
              context: 'PR Validation / Push DB to Staging (pull_request)',
              description: 'Migration applied to Staging DB.'
            });

  # Job 4: รัน E2E Tests หลังจาก Push สำเร็จ
  e2e_tests:
    name: Run E2E Tests
    needs: [push_db_staging]
    if: always() && needs.push_db_staging.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node 18
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
      - run: npm ci
      - name: Create .env.ci from secrets
        run: |
          echo "CRON_SECRET=${{ secrets.CRON_SECRET }}" >> .env.ci
          echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" >> .env.ci
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" >> .env.ci
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env.ci
          echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> .env.ci
          echo "RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}" >> .env.ci
          echo "SUPABASE_ENV=staging" >> .env.ci
          echo "DISPATCH_DRY_RUN=true" >> .env.ci
          echo "EMAIL_MODE=DRY_RUN" >> .env.ci
      - run: npx playwright install --with-deps
      - name: Run Playwright E2E
        env:
          CI: "true"
        run: npx playwright test tests/e2e/dispatch-emails.e2e.spec.ts --reporter=line
      - name: Report required context for Ruleset
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const sha = context.payload.pull_request.head.sha;
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner, repo: context.repo.repo, sha,
              state: '${{ job.status }}' === 'success' ? 'success' : 'failure',
              context: 'PR Validation / Run E2E Tests (pull_request)',
              description: 'E2E tests completed.'
            });
