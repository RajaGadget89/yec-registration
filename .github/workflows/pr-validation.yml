name: PR Validation Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: pr-validation-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: read
  statuses: write

jobs:
  # Job 1: DB Migration Check (Required)
  db_migration_check:
    name: DB — Migrate to Staging / test_on_shadow (pull_request)
    runs-on: ubuntu-latest
    outputs:
      db_changed: ${{ steps.detect_changes.outputs.db }}
      db_files: ${{ steps.detect_changes.outputs.db_files }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect DB Changes
        id: detect_changes
        uses: dorny/paths-filter@v3
        with:
          list-files: shell
          filters: |
            db:
              - 'migrations/**/*.sql'

      - name: Fast-pass when no DB changes
        if: steps.detect_changes.outputs.db != 'true'
        run: echo "No DB changes detected. Skipping shadow test."

      - name: Setup Supabase CLI
        if: steps.detect_changes.outputs.db == 'true'
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Build and Test on Shadow DB
        if: steps.detect_changes.outputs.db == 'true'
        env:
          STAGING_DB_URL: ${{ secrets.STAGING_DB_URL }}
        run: |
          echo "DB changes detected. Building and testing on shadow DB..."
          # (นำตรรกะการ build และ reset จากไฟล์เดิมของคุณมาใส่ที่นี่)
          # เพื่อความกระชับจึงใช้คำสั่งจำลอง
          rm -rf supabase/migrations && mkdir -p supabase/migrations
          cp -a migrations/. supabase/migrations/
          supabase start
          printf 'y\n' | supabase db reset

      - name: Report required context
        if: always() # ✅ Always run this step
        uses: actions/github-script@v7
        with:
          script: |
            const sha = context.payload.pull_request.head.sha;
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner, repo: context.repo.repo, sha,
              state: '${{ job.status }}',
              context: 'DB — Migrate to Staging / test_on_shadow (pull_request)',
              description: 'Validation completed.'
            });

  # Job 2: E2E Tests (Required)
  e2e_tests:
    name: E2E Dispatch Emails Tests / dispatch_emails (pull_request)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node 18 and Install Dependencies
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"
      - run: npm ci

      - name: Create .env.ci from secrets
        run: |
          echo "CRON_SECRET=${{ secrets.CRON_SECRET }}" >> .env.ci
          echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" >> .env.ci
          # (ใส่ .env variables ที่เหลือทั้งหมด)
          echo "SUPABASE_ENV=staging" >> .env.ci
          echo "DISPATCH_DRY_RUN=true" >> .env.ci
          echo "EMAIL_MODE=DRY_RUN" >> .env.ci


      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run Playwright E2E
        run: npx playwright test tests/e2e/dispatch-emails.e2e.spec.ts --reporter=line

      - name: Report required context
        if: always() # ✅ Always run this step
        uses: actions/github-script@v7
        with:
          script: |
            const sha = context.payload.pull_request.head.sha;
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner, repo: context.repo.repo, sha,
              state: '${{ job.status }}',
              context: 'E2E Dispatch Emails Tests / dispatch_emails (pull_request)',
              description: 'E2E tests completed.'
            });

  # Job 3: (Optional) Deploy to Staging after checks pass
  push_to_staging:
    name: Push Migration to Staging
    needs: [db_migration_check, e2e_tests]
    if: success() && needs.db_migration_check.outputs.db_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client
      - name: Apply changed migrations to STAGING
        env:
          STAGING_DB_URL: ${{ secrets.STAGING_DB_URL }}
          CHANGED_FILES: ${{ needs.db_migration_check.outputs.db_files }}
        run: |
          set -euo pipefail
          echo "Applying migrations to Staging DB:"
          echo "${CHANGED_FILES}"
          for f in $(echo "${CHANGED_FILES}" | tr ' ' '\n' | sort); do
            echo "==> Applying $f"
            psql "${STAGING_DB_URL}" -v ON_ERROR_STOP=1 -f "$f"
          done
